$date
	Wed Sep 24 14:51:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 8 ! alu_out_bus [7:0] $end
$var reg 1 " clk $end
$scope module UUT $end
$var wire 1 " clk $end
$var wire 8 # regB_out_bus [7:0] $end
$var wire 8 $ regA_out_bus [7:0] $end
$var wire 4 % pc_out_bus [3:0] $end
$var wire 8 & muxB_out_bus [7:0] $end
$var wire 9 ' im_out_bus [8:0] $end
$var wire 8 ( alu_out_bus [7:0] $end
$scope module ALU $end
$var wire 2 ) s [1:0] $end
$var wire 8 * b [7:0] $end
$var wire 8 + a [7:0] $end
$var reg 8 , out [7:0] $end
$upscope $end
$scope module IM $end
$var wire 9 - out [8:0] $end
$var wire 4 . address [3:0] $end
$upscope $end
$scope module PC $end
$var wire 1 " clk $end
$var wire 4 / pc [3:0] $end
$var reg 4 0 r [3:0] $end
$upscope $end
$scope module muxB $end
$var wire 1 1 c $end
$var wire 8 2 e1 [7:0] $end
$var wire 8 3 e0 [7:0] $end
$var reg 8 4 out [7:0] $end
$upscope $end
$scope module regA $end
$var wire 1 " clk $end
$var wire 8 5 data [7:0] $end
$var wire 1 6 load $end
$var wire 8 7 out [7:0] $end
$var reg 8 8 q [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 " clk $end
$var wire 8 9 data [7:0] $end
$var wire 1 : load $end
$var wire 8 ; out [7:0] $end
$var reg 8 < q [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 <
b0 ;
1:
b11 9
b0 8
b0 7
06
b11 5
b11 4
b0 3
b11 2
11
b0 0
b0 /
b0 .
b110000011 -
b11 ,
b0 +
b11 *
b0 )
b11 (
b110000011 '
b11 &
b0 %
b0 $
b0 #
0"
b11 !
$end
#1000
b110 !
b110 (
b110 ,
b110 5
b110 9
b110 &
b110 *
b110 4
b110 2
0:
16
b101000110 '
b101000110 -
b1 %
b1 .
b1 /
b1 0
b11 #
b11 3
b11 ;
b11 <
1"
#2000
0"
#3000
b11 &
b11 *
b11 4
b11 !
b11 (
b11 ,
b11 5
b11 9
b1 )
01
b0 2
1:
06
b110 $
b110 +
b110 7
b110 8
b10010000 '
b10010000 -
b10 %
b10 .
b10 /
b10 0
1"
#4000
0"
#5000
b10 !
b10 (
b10 ,
b10 5
b10 9
b10 )
0:
16
b1100000 '
b1100000 -
b11 %
b11 .
b11 /
b11 0
1"
#6000
0"
#7000
b101 !
b101 (
b101 ,
b101 5
b101 9
b0 )
06
b10 $
b10 +
b10 7
b10 8
b0 '
b0 -
b100 %
b100 .
b100 /
b100 0
1"
#8000
0"
#9000
b1 2
b1 '
b1 -
b101 %
b101 .
b101 /
b101 0
1"
#10000
0"
#11000
b10 2
b10 '
b10 -
b110 %
b110 .
b110 /
b110 0
1"
#12000
0"
#13000
b11 2
b11 '
b11 -
b111 %
b111 .
b111 /
b111 0
1"
#14000
0"
#15000
b0 2
b0 '
b0 -
b1000 %
b1000 .
b1000 /
b1000 0
1"
#16000
0"
#17000
b1 2
b1 '
b1 -
b1001 %
b1001 .
b1001 /
b1001 0
1"
#18000
0"
#19000
b10 2
b10 '
b10 -
b1010 %
b1010 .
b1010 /
b1010 0
1"
#20000
0"
#21000
b11 2
b11 '
b11 -
b1011 %
b1011 .
b1011 /
b1011 0
1"
#22000
0"
#23000
b0 2
b0 '
b0 -
b1100 %
b1100 .
b1100 /
b1100 0
1"
#24000
0"
#25000
b1 2
b1 '
b1 -
b1101 %
b1101 .
b1101 /
b1101 0
1"
#26000
0"
#27000
b10 2
b10 '
b10 -
b1110 %
b1110 .
b1110 /
b1110 0
1"
#28000
0"
#29000
b11 2
b11 '
b11 -
b1111 %
b1111 .
b1111 /
b1111 0
1"
#30000
0"
#31000
11
1:
b110000011 '
b110000011 -
b0 %
b0 .
b0 /
b0 0
1"
#32000
0"
#33000
b1000 !
b1000 (
b1000 ,
b1000 5
b1000 9
b110 &
b110 *
b110 4
b110 2
0:
16
b101000110 '
b101000110 -
b1 %
b1 .
b1 /
b1 0
b101 #
b101 3
b101 ;
b101 <
1"
#34000
0"
#35000
b101 &
b101 *
b101 4
b11 !
b11 (
b11 ,
b11 5
b11 9
b1 )
01
b0 2
1:
06
b1000 $
b1000 +
b1000 7
b1000 8
b10010000 '
b10010000 -
b10 %
b10 .
b10 /
b10 0
1"
#36000
0"
#37000
b0 !
b0 (
b0 ,
b0 5
b0 9
b10 )
0:
16
b11 &
b11 *
b11 4
b1100000 '
b1100000 -
b11 %
b11 .
b11 /
b11 0
b11 #
b11 3
b11 ;
b11 <
1"
#38000
0"
#39000
b11 !
b11 (
b11 ,
b11 5
b11 9
b0 )
06
b0 $
b0 +
b0 7
b0 8
b0 '
b0 -
b100 %
b100 .
b100 /
b100 0
1"
#40000
0"
